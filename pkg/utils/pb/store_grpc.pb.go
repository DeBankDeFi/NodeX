// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: store.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3ProxyClient is the client API for S3Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3ProxyClient interface {
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (S3Proxy_GetFileClient, error)
	PutFile(ctx context.Context, opts ...grpc.CallOption) (S3Proxy_PutFileClient, error)
	ListHeaderStartAt(ctx context.Context, in *ListHeaderStartAtRequest, opts ...grpc.CallOption) (*ListHeaderStartAtReply, error)
	RemoveFiles(ctx context.Context, in *RemoveFilesRequest, opts ...grpc.CallOption) (*RemoveFilesReply, error)
}

type s3ProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewS3ProxyClient(cc grpc.ClientConnInterface) S3ProxyClient {
	return &s3ProxyClient{cc}
}

func (c *s3ProxyClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (S3Proxy_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &S3Proxy_ServiceDesc.Streams[0], "/pb.S3Proxy/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &s3ProxyGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type S3Proxy_GetFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type s3ProxyGetFileClient struct {
	grpc.ClientStream
}

func (x *s3ProxyGetFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *s3ProxyClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (S3Proxy_PutFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &S3Proxy_ServiceDesc.Streams[1], "/pb.S3Proxy/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &s3ProxyPutFileClient{stream}
	return x, nil
}

type S3Proxy_PutFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*PutFileReply, error)
	grpc.ClientStream
}

type s3ProxyPutFileClient struct {
	grpc.ClientStream
}

func (x *s3ProxyPutFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *s3ProxyPutFileClient) CloseAndRecv() (*PutFileReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *s3ProxyClient) ListHeaderStartAt(ctx context.Context, in *ListHeaderStartAtRequest, opts ...grpc.CallOption) (*ListHeaderStartAtReply, error) {
	out := new(ListHeaderStartAtReply)
	err := c.cc.Invoke(ctx, "/pb.S3Proxy/ListHeaderStartAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ProxyClient) RemoveFiles(ctx context.Context, in *RemoveFilesRequest, opts ...grpc.CallOption) (*RemoveFilesReply, error) {
	out := new(RemoveFilesReply)
	err := c.cc.Invoke(ctx, "/pb.S3Proxy/RemoveFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3ProxyServer is the server API for S3Proxy service.
// All implementations must embed UnimplementedS3ProxyServer
// for forward compatibility
type S3ProxyServer interface {
	GetFile(*GetFileRequest, S3Proxy_GetFileServer) error
	PutFile(S3Proxy_PutFileServer) error
	ListHeaderStartAt(context.Context, *ListHeaderStartAtRequest) (*ListHeaderStartAtReply, error)
	RemoveFiles(context.Context, *RemoveFilesRequest) (*RemoveFilesReply, error)
	mustEmbedUnimplementedS3ProxyServer()
}

// UnimplementedS3ProxyServer must be embedded to have forward compatible implementations.
type UnimplementedS3ProxyServer struct {
}

func (UnimplementedS3ProxyServer) GetFile(*GetFileRequest, S3Proxy_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedS3ProxyServer) PutFile(S3Proxy_PutFileServer) error {
	return status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedS3ProxyServer) ListHeaderStartAt(context.Context, *ListHeaderStartAtRequest) (*ListHeaderStartAtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeaderStartAt not implemented")
}
func (UnimplementedS3ProxyServer) RemoveFiles(context.Context, *RemoveFilesRequest) (*RemoveFilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFiles not implemented")
}
func (UnimplementedS3ProxyServer) mustEmbedUnimplementedS3ProxyServer() {}

// UnsafeS3ProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3ProxyServer will
// result in compilation errors.
type UnsafeS3ProxyServer interface {
	mustEmbedUnimplementedS3ProxyServer()
}

func RegisterS3ProxyServer(s grpc.ServiceRegistrar, srv S3ProxyServer) {
	s.RegisterService(&S3Proxy_ServiceDesc, srv)
}

func _S3Proxy_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(S3ProxyServer).GetFile(m, &s3ProxyGetFileServer{stream})
}

type S3Proxy_GetFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type s3ProxyGetFileServer struct {
	grpc.ServerStream
}

func (x *s3ProxyGetFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _S3Proxy_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S3ProxyServer).PutFile(&s3ProxyPutFileServer{stream})
}

type S3Proxy_PutFileServer interface {
	SendAndClose(*PutFileReply) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type s3ProxyPutFileServer struct {
	grpc.ServerStream
}

func (x *s3ProxyPutFileServer) SendAndClose(m *PutFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *s3ProxyPutFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _S3Proxy_ListHeaderStartAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHeaderStartAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ProxyServer).ListHeaderStartAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.S3Proxy/ListHeaderStartAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ProxyServer).ListHeaderStartAt(ctx, req.(*ListHeaderStartAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Proxy_RemoveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ProxyServer).RemoveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.S3Proxy/RemoveFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ProxyServer).RemoveFiles(ctx, req.(*RemoveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3Proxy_ServiceDesc is the grpc.ServiceDesc for S3Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.S3Proxy",
	HandlerType: (*S3ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHeaderStartAt",
			Handler:    _S3Proxy_ListHeaderStartAt_Handler,
		},
		{
			MethodName: "RemoveFiles",
			Handler:    _S3Proxy_RemoveFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _S3Proxy_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFile",
			Handler:       _S3Proxy_PutFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "store.proto",
}
