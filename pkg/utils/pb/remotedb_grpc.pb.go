// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: remotedb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteDBClient is the client API for RemoteDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteDBClient interface {
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasReply, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelReply, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
	Compact(ctx context.Context, in *CompactRequest, opts ...grpc.CallOption) (*CompactReply, error)
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchReply, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
	Iter(ctx context.Context, in *IterRequest, opts ...grpc.CallOption) (RemoteDB_IterClient, error)
	Snapshot(ctx context.Context, opts ...grpc.CallOption) (RemoteDB_SnapshotClient, error)
}

type remoteDBClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteDBClient(cc grpc.ClientConnInterface) RemoteDBClient {
	return &remoteDBClient{cc}
}

func (c *remoteDBClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasReply, error) {
	out := new(HasReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelReply, error) {
	out := new(DelReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Compact(ctx context.Context, in *CompactRequest, opts ...grpc.CallOption) (*CompactReply, error) {
	out := new(CompactReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchReply, error) {
	out := new(BatchReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/pb.RemoteDB/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteDBClient) Iter(ctx context.Context, in *IterRequest, opts ...grpc.CallOption) (RemoteDB_IterClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteDB_ServiceDesc.Streams[0], "/pb.RemoteDB/iter", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteDBIterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteDB_IterClient interface {
	Recv() (*IterReply, error)
	grpc.ClientStream
}

type remoteDBIterClient struct {
	grpc.ClientStream
}

func (x *remoteDBIterClient) Recv() (*IterReply, error) {
	m := new(IterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteDBClient) Snapshot(ctx context.Context, opts ...grpc.CallOption) (RemoteDB_SnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteDB_ServiceDesc.Streams[1], "/pb.RemoteDB/snapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteDBSnapshotClient{stream}
	return x, nil
}

type RemoteDB_SnapshotClient interface {
	Send(*SnapshotRequest) error
	Recv() (*SnapshotReply, error)
	grpc.ClientStream
}

type remoteDBSnapshotClient struct {
	grpc.ClientStream
}

func (x *remoteDBSnapshotClient) Send(m *SnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteDBSnapshotClient) Recv() (*SnapshotReply, error) {
	m := new(SnapshotReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteDBServer is the server API for RemoteDB service.
// All implementations must embed UnimplementedRemoteDBServer
// for forward compatibility
type RemoteDBServer interface {
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	Has(context.Context, *HasRequest) (*HasReply, error)
	Put(context.Context, *PutRequest) (*PutReply, error)
	Del(context.Context, *DelRequest) (*DelReply, error)
	Stat(context.Context, *StatRequest) (*StatReply, error)
	Stats(context.Context, *StatsRequest) (*StatsReply, error)
	Compact(context.Context, *CompactRequest) (*CompactReply, error)
	Batch(context.Context, *BatchRequest) (*BatchReply, error)
	Close(context.Context, *CloseRequest) (*CloseReply, error)
	Iter(*IterRequest, RemoteDB_IterServer) error
	Snapshot(RemoteDB_SnapshotServer) error
	mustEmbedUnimplementedRemoteDBServer()
}

// UnimplementedRemoteDBServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteDBServer struct {
}

func (UnimplementedRemoteDBServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedRemoteDBServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRemoteDBServer) Has(context.Context, *HasRequest) (*HasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedRemoteDBServer) Put(context.Context, *PutRequest) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedRemoteDBServer) Del(context.Context, *DelRequest) (*DelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedRemoteDBServer) Stat(context.Context, *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedRemoteDBServer) Stats(context.Context, *StatsRequest) (*StatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedRemoteDBServer) Compact(context.Context, *CompactRequest) (*CompactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (UnimplementedRemoteDBServer) Batch(context.Context, *BatchRequest) (*BatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedRemoteDBServer) Close(context.Context, *CloseRequest) (*CloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedRemoteDBServer) Iter(*IterRequest, RemoteDB_IterServer) error {
	return status.Errorf(codes.Unimplemented, "method Iter not implemented")
}
func (UnimplementedRemoteDBServer) Snapshot(RemoteDB_SnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedRemoteDBServer) mustEmbedUnimplementedRemoteDBServer() {}

// UnsafeRemoteDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteDBServer will
// result in compilation errors.
type UnsafeRemoteDBServer interface {
	mustEmbedUnimplementedRemoteDBServer()
}

func RegisterRemoteDBServer(s grpc.ServiceRegistrar, srv RemoteDBServer) {
	s.RegisterService(&RemoteDB_ServiceDesc, srv)
}

func _RemoteDB_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Compact(ctx, req.(*CompactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteDBServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RemoteDB/close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteDBServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteDB_Iter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteDBServer).Iter(m, &remoteDBIterServer{stream})
}

type RemoteDB_IterServer interface {
	Send(*IterReply) error
	grpc.ServerStream
}

type remoteDBIterServer struct {
	grpc.ServerStream
}

func (x *remoteDBIterServer) Send(m *IterReply) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteDB_Snapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteDBServer).Snapshot(&remoteDBSnapshotServer{stream})
}

type RemoteDB_SnapshotServer interface {
	Send(*SnapshotReply) error
	Recv() (*SnapshotRequest, error)
	grpc.ServerStream
}

type remoteDBSnapshotServer struct {
	grpc.ServerStream
}

func (x *remoteDBSnapshotServer) Send(m *SnapshotReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteDBSnapshotServer) Recv() (*SnapshotRequest, error) {
	m := new(SnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteDB_ServiceDesc is the grpc.ServiceDesc for RemoteDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RemoteDB",
	HandlerType: (*RemoteDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "open",
			Handler:    _RemoteDB_Open_Handler,
		},
		{
			MethodName: "get",
			Handler:    _RemoteDB_Get_Handler,
		},
		{
			MethodName: "has",
			Handler:    _RemoteDB_Has_Handler,
		},
		{
			MethodName: "put",
			Handler:    _RemoteDB_Put_Handler,
		},
		{
			MethodName: "del",
			Handler:    _RemoteDB_Del_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _RemoteDB_Stat_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _RemoteDB_Stats_Handler,
		},
		{
			MethodName: "compact",
			Handler:    _RemoteDB_Compact_Handler,
		},
		{
			MethodName: "batch",
			Handler:    _RemoteDB_Batch_Handler,
		},
		{
			MethodName: "close",
			Handler:    _RemoteDB_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "iter",
			Handler:       _RemoteDB_Iter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "snapshot",
			Handler:       _RemoteDB_Snapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remotedb.proto",
}
